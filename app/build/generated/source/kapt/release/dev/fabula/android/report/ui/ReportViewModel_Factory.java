// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.report.ui;

import dagger.internal.Factory;
import dev.fabula.android.canopy.repo.CanopyRepository;
import dev.fabula.android.dimensions.fence.repo.DimensionsFenceRepository;
import dev.fabula.android.measurements.list.repo.MeasurementsRepository;
import dev.fabula.android.platform.repo.PlatformRepository;
import dev.fabula.android.railway.repo.RailwayRepository;
import dev.fabula.android.report.repo.ReportRepository;
import dev.fabula.android.screen.measurements.repo.ScreenMeasurementsRepository;
import dev.fabula.android.section.repo.RailwaySectionRepository;
import dev.fabula.android.station.peregon.repo.StationPeregonRepository;
import dev.fabula.android.support.repo.SupportRepository;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ReportViewModel_Factory implements Factory<ReportViewModel> {
  private final Provider<RailwayRepository> repositoryProvider;

  private final Provider<RailwaySectionRepository> repositorySectionProvider;

  private final Provider<SupportRepository> repositorySupportProvider;

  private final Provider<ScreenMeasurementsRepository> repositoryScreenMeasurementsProvider;

  private final Provider<ReportRepository> repositoryReportProvider;

  private final Provider<PlatformRepository> repositoryPlatformProvider;

  private final Provider<MeasurementsRepository> repositoryMeasurementProvider;

  private final Provider<StationPeregonRepository> repositoryStationProvider;

  private final Provider<DimensionsFenceRepository> repositoryDimensionsFenceProvider;

  private final Provider<CanopyRepository> repositoryCanopyProvider;

  public ReportViewModel_Factory(Provider<RailwayRepository> repositoryProvider,
      Provider<RailwaySectionRepository> repositorySectionProvider,
      Provider<SupportRepository> repositorySupportProvider,
      Provider<ScreenMeasurementsRepository> repositoryScreenMeasurementsProvider,
      Provider<ReportRepository> repositoryReportProvider,
      Provider<PlatformRepository> repositoryPlatformProvider,
      Provider<MeasurementsRepository> repositoryMeasurementProvider,
      Provider<StationPeregonRepository> repositoryStationProvider,
      Provider<DimensionsFenceRepository> repositoryDimensionsFenceProvider,
      Provider<CanopyRepository> repositoryCanopyProvider) {
    this.repositoryProvider = repositoryProvider;
    this.repositorySectionProvider = repositorySectionProvider;
    this.repositorySupportProvider = repositorySupportProvider;
    this.repositoryScreenMeasurementsProvider = repositoryScreenMeasurementsProvider;
    this.repositoryReportProvider = repositoryReportProvider;
    this.repositoryPlatformProvider = repositoryPlatformProvider;
    this.repositoryMeasurementProvider = repositoryMeasurementProvider;
    this.repositoryStationProvider = repositoryStationProvider;
    this.repositoryDimensionsFenceProvider = repositoryDimensionsFenceProvider;
    this.repositoryCanopyProvider = repositoryCanopyProvider;
  }

  @Override
  public ReportViewModel get() {
    return newInstance(repositoryProvider.get(), repositorySectionProvider.get(), repositorySupportProvider.get(), repositoryScreenMeasurementsProvider.get(), repositoryReportProvider.get(), repositoryPlatformProvider.get(), repositoryMeasurementProvider.get(), repositoryStationProvider.get(), repositoryDimensionsFenceProvider.get(), repositoryCanopyProvider.get());
  }

  public static ReportViewModel_Factory create(Provider<RailwayRepository> repositoryProvider,
      Provider<RailwaySectionRepository> repositorySectionProvider,
      Provider<SupportRepository> repositorySupportProvider,
      Provider<ScreenMeasurementsRepository> repositoryScreenMeasurementsProvider,
      Provider<ReportRepository> repositoryReportProvider,
      Provider<PlatformRepository> repositoryPlatformProvider,
      Provider<MeasurementsRepository> repositoryMeasurementProvider,
      Provider<StationPeregonRepository> repositoryStationProvider,
      Provider<DimensionsFenceRepository> repositoryDimensionsFenceProvider,
      Provider<CanopyRepository> repositoryCanopyProvider) {
    return new ReportViewModel_Factory(repositoryProvider, repositorySectionProvider, repositorySupportProvider, repositoryScreenMeasurementsProvider, repositoryReportProvider, repositoryPlatformProvider, repositoryMeasurementProvider, repositoryStationProvider, repositoryDimensionsFenceProvider, repositoryCanopyProvider);
  }

  public static ReportViewModel newInstance(RailwayRepository repository,
      RailwaySectionRepository repositorySection, SupportRepository repositorySupport,
      ScreenMeasurementsRepository repositoryScreenMeasurements, ReportRepository repositoryReport,
      PlatformRepository repositoryPlatform, MeasurementsRepository repositoryMeasurement,
      StationPeregonRepository repositoryStation,
      DimensionsFenceRepository repositoryDimensionsFence, CanopyRepository repositoryCanopy) {
    return new ReportViewModel(repository, repositorySection, repositorySupport, repositoryScreenMeasurements, repositoryReport, repositoryPlatform, repositoryMeasurement, repositoryStation, repositoryDimensionsFence, repositoryCanopy);
  }
}
