// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.bridge.crossing.di;

import androidx.lifecycle.ViewModel;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import dev.fabula.android.app.db.AppRoomDatabase;
import dev.fabula.android.app.di.AppComponent;
import dev.fabula.android.app.di.ViewModelFactory;
import dev.fabula.android.app.ui.ViewModelFragment_MembersInjector;
import dev.fabula.android.auth_old.AppAuth;
import dev.fabula.android.bridge.crossing.dao.BridgeCrossingDao;
import dev.fabula.android.bridge.crossing.repo.BridgeRepository;
import dev.fabula.android.bridge.crossing.repo.BridgeRepository_Factory;
import dev.fabula.android.bridge.crossing.ui.BridgeCrossingFragment;
import dev.fabula.android.bridge.crossing.ui.BridgeViewModule;
import dev.fabula.android.bridge.crossing.ui.BridgeViewModule_Factory;
import dev.fabula.android.platform.dao.PlatformDao;
import dev.fabula.android.platform.di.PlatformDaoModule;
import dev.fabula.android.platform.di.PlatformDaoModule_ProvidesPlatformDAOFactory;
import dev.fabula.android.support.dao.SupportDao;
import dev.fabula.android.support.di.SupportDaoModule;
import dev.fabula.android.support.di.SupportDaoModule_ProvidesSupportDAOFactory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBridgeComponent implements BridgeComponent {
  private Provider<AppRoomDatabase> providesRoomDatabaseProvider;

  private Provider<PlatformDao> providesPlatformDAOProvider;

  private Provider<SupportDao> providesSupportDAOProvider;

  private Provider<BridgeCrossingDao> providesBridgeDAOProvider;

  private Provider<AppAuth> provideAuthProvider;

  private Provider<BridgeRepository> bridgeRepositoryProvider;

  private Provider<BridgeViewModule> bridgeViewModuleProvider;

  private DaggerBridgeComponent(PlatformDaoModule platformDaoModuleParam,
      SupportDaoModule supportDaoModuleParam, BridgeCrossingDaoModule bridgeCrossingDaoModuleParam,
      AppComponent appComponentParam) {

    initialize(platformDaoModuleParam, supportDaoModuleParam, bridgeCrossingDaoModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(BridgeViewModule.class, (Provider) bridgeViewModuleProvider);
  }

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final PlatformDaoModule platformDaoModuleParam,
      final SupportDaoModule supportDaoModuleParam,
      final BridgeCrossingDaoModule bridgeCrossingDaoModuleParam,
      final AppComponent appComponentParam) {
    this.providesRoomDatabaseProvider = new dev_fabula_android_app_di_AppComponent_providesRoomDatabase(appComponentParam);
    this.providesPlatformDAOProvider = PlatformDaoModule_ProvidesPlatformDAOFactory.create(platformDaoModuleParam, providesRoomDatabaseProvider);
    this.providesSupportDAOProvider = SupportDaoModule_ProvidesSupportDAOFactory.create(supportDaoModuleParam, providesRoomDatabaseProvider);
    this.providesBridgeDAOProvider = BridgeCrossingDaoModule_ProvidesBridgeDAOFactory.create(bridgeCrossingDaoModuleParam, providesRoomDatabaseProvider);
    this.provideAuthProvider = SingleCheck.provider(new dev_fabula_android_app_di_AppComponent_provideAuth(appComponentParam));
    this.bridgeRepositoryProvider = BridgeRepository_Factory.create(providesPlatformDAOProvider, providesSupportDAOProvider, providesBridgeDAOProvider, provideAuthProvider);
    this.bridgeViewModuleProvider = BridgeViewModule_Factory.create(bridgeRepositoryProvider);
  }

  @Override
  public void inject(BridgeCrossingFragment fragment) {
    injectBridgeCrossingFragment(fragment);
  }

  private BridgeCrossingFragment injectBridgeCrossingFragment(BridgeCrossingFragment instance) {
    ViewModelFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private PlatformDaoModule platformDaoModule;

    private SupportDaoModule supportDaoModule;

    private BridgeCrossingDaoModule bridgeCrossingDaoModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder platformDaoModule(PlatformDaoModule platformDaoModule) {
      this.platformDaoModule = Preconditions.checkNotNull(platformDaoModule);
      return this;
    }

    public Builder supportDaoModule(SupportDaoModule supportDaoModule) {
      this.supportDaoModule = Preconditions.checkNotNull(supportDaoModule);
      return this;
    }

    public Builder bridgeCrossingDaoModule(BridgeCrossingDaoModule bridgeCrossingDaoModule) {
      this.bridgeCrossingDaoModule = Preconditions.checkNotNull(bridgeCrossingDaoModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public BridgeComponent build() {
      if (platformDaoModule == null) {
        this.platformDaoModule = new PlatformDaoModule();
      }
      if (supportDaoModule == null) {
        this.supportDaoModule = new SupportDaoModule();
      }
      if (bridgeCrossingDaoModule == null) {
        this.bridgeCrossingDaoModule = new BridgeCrossingDaoModule();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerBridgeComponent(platformDaoModule, supportDaoModule, bridgeCrossingDaoModule, appComponent);
    }
  }

  private static class dev_fabula_android_app_di_AppComponent_providesRoomDatabase implements Provider<AppRoomDatabase> {
    private final AppComponent appComponent;

    dev_fabula_android_app_di_AppComponent_providesRoomDatabase(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AppRoomDatabase get() {
      return Preconditions.checkNotNull(appComponent.providesRoomDatabase(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class dev_fabula_android_app_di_AppComponent_provideAuth implements Provider<AppAuth> {
    private final AppComponent appComponent;

    dev_fabula_android_app_di_AppComponent_provideAuth(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AppAuth get() {
      return Preconditions.checkNotNull(appComponent.provideAuth(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
