// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.support.repo;

import dagger.internal.Factory;
import dev.fabula.android.bridge.crossing.dao.BridgeCrossingDao;
import dev.fabula.android.measurements.create.dao.CreateMeasurementsDao;
import dev.fabula.android.measurements.type.dao.MeasurementTypeDao;
import dev.fabula.android.platform.dao.PlatformDao;
import dev.fabula.android.support.api.SupportApi;
import dev.fabula.android.support.dao.SupportDao;
import dev.fabula.android.wire.carrier.dao.CarrierWireDao;
import dev.fabula.android.wire.contact.dao.ContactWireDao;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SupportRepository_Factory implements Factory<SupportRepository> {
  private final Provider<SupportDao> supportDaoProvider;

  private final Provider<SupportApi> supportApiProvider;

  private final Provider<PlatformDao> platformDaoProvider;

  private final Provider<BridgeCrossingDao> bridgeDaoProvider;

  private final Provider<ContactWireDao> contactWireDaoProvider;

  private final Provider<CarrierWireDao> carrierWireDaoProvider;

  private final Provider<MeasurementTypeDao> measurementTypeDaoProvider;

  private final Provider<CreateMeasurementsDao> createMeasurementsDaoProvider;

  public SupportRepository_Factory(Provider<SupportDao> supportDaoProvider,
      Provider<SupportApi> supportApiProvider, Provider<PlatformDao> platformDaoProvider,
      Provider<BridgeCrossingDao> bridgeDaoProvider,
      Provider<ContactWireDao> contactWireDaoProvider,
      Provider<CarrierWireDao> carrierWireDaoProvider,
      Provider<MeasurementTypeDao> measurementTypeDaoProvider,
      Provider<CreateMeasurementsDao> createMeasurementsDaoProvider) {
    this.supportDaoProvider = supportDaoProvider;
    this.supportApiProvider = supportApiProvider;
    this.platformDaoProvider = platformDaoProvider;
    this.bridgeDaoProvider = bridgeDaoProvider;
    this.contactWireDaoProvider = contactWireDaoProvider;
    this.carrierWireDaoProvider = carrierWireDaoProvider;
    this.measurementTypeDaoProvider = measurementTypeDaoProvider;
    this.createMeasurementsDaoProvider = createMeasurementsDaoProvider;
  }

  @Override
  public SupportRepository get() {
    return newInstance(supportDaoProvider.get(), supportApiProvider.get(), platformDaoProvider.get(), bridgeDaoProvider.get(), contactWireDaoProvider.get(), carrierWireDaoProvider.get(), measurementTypeDaoProvider.get(), createMeasurementsDaoProvider.get());
  }

  public static SupportRepository_Factory create(Provider<SupportDao> supportDaoProvider,
      Provider<SupportApi> supportApiProvider, Provider<PlatformDao> platformDaoProvider,
      Provider<BridgeCrossingDao> bridgeDaoProvider,
      Provider<ContactWireDao> contactWireDaoProvider,
      Provider<CarrierWireDao> carrierWireDaoProvider,
      Provider<MeasurementTypeDao> measurementTypeDaoProvider,
      Provider<CreateMeasurementsDao> createMeasurementsDaoProvider) {
    return new SupportRepository_Factory(supportDaoProvider, supportApiProvider, platformDaoProvider, bridgeDaoProvider, contactWireDaoProvider, carrierWireDaoProvider, measurementTypeDaoProvider, createMeasurementsDaoProvider);
  }

  public static SupportRepository newInstance(SupportDao supportDao, SupportApi supportApi,
      PlatformDao platformDao, BridgeCrossingDao bridgeDao, ContactWireDao contactWireDao,
      CarrierWireDao carrierWireDao, MeasurementTypeDao measurementTypeDao,
      CreateMeasurementsDao createMeasurementsDao) {
    return new SupportRepository(supportDao, supportApi, platformDao, bridgeDao, contactWireDao, carrierWireDao, measurementTypeDao, createMeasurementsDao);
  }
}
