// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.app.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dev.fabula.android.auth_old.AppAuth;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  private final Provider<AppAuth> authProvider;

  public NetworkModule_ProvideHttpClientFactory(NetworkModule module,
      Provider<Context> contextProvider, Provider<AppAuth> authProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.authProvider = authProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideHttpClient(module, contextProvider.get(), authProvider.get());
  }

  public static NetworkModule_ProvideHttpClientFactory create(NetworkModule module,
      Provider<Context> contextProvider, Provider<AppAuth> authProvider) {
    return new NetworkModule_ProvideHttpClientFactory(module, contextProvider, authProvider);
  }

  public static OkHttpClient provideHttpClient(NetworkModule instance, Context context,
      AppAuth auth) {
    return Preconditions.checkNotNull(instance.provideHttpClient(context, auth), "Cannot return null from a non-@Nullable @Provides method");
  }
}
