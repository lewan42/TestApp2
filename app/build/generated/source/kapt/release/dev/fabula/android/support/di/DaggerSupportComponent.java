// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.support.di;

import androidx.lifecycle.ViewModel;
import dagger.internal.Preconditions;
import dev.fabula.android.app.db.AppRoomDatabase;
import dev.fabula.android.app.di.AppComponent;
import dev.fabula.android.app.di.ViewModelFactory;
import dev.fabula.android.app.ui.ViewModelFragment_MembersInjector;
import dev.fabula.android.bridge.crossing.dao.BridgeCrossingDao;
import dev.fabula.android.bridge.crossing.di.BridgeCrossingDaoModule;
import dev.fabula.android.bridge.crossing.di.BridgeCrossingDaoModule_ProvidesBridgeDAOFactory;
import dev.fabula.android.measurements.create.dao.CreateMeasurementsDao;
import dev.fabula.android.measurements.create.di.CreateMeasurementsDaoModule;
import dev.fabula.android.measurements.create.di.CreateMeasurementsDaoModule_ProvidesCreateMeasurementsDAOFactory;
import dev.fabula.android.measurements.type.dao.MeasurementTypeDao;
import dev.fabula.android.measurements.type.di.MeasurementTypeDaoModule;
import dev.fabula.android.measurements.type.di.MeasurementTypeDaoModule_ProvidesMeasurementTypeDAOFactory;
import dev.fabula.android.platform.dao.PlatformDao;
import dev.fabula.android.platform.di.PlatformDaoModule;
import dev.fabula.android.platform.di.PlatformDaoModule_ProvidesPlatformDAOFactory;
import dev.fabula.android.support.api.SupportApi;
import dev.fabula.android.support.dao.SupportDao;
import dev.fabula.android.support.repo.SupportRepository;
import dev.fabula.android.support.repo.SupportRepository_Factory;
import dev.fabula.android.support.ui.SupportFragment;
import dev.fabula.android.support.ui.SupportViewModule;
import dev.fabula.android.support.ui.SupportViewModule_Factory;
import dev.fabula.android.wire.carrier.dao.CarrierWireDao;
import dev.fabula.android.wire.carrier.di.CarrierWireDaoModule;
import dev.fabula.android.wire.carrier.di.CarrierWireDaoModule_ProvidesCarrierWireDAOFactory;
import dev.fabula.android.wire.contact.dao.ContactWireDao;
import dev.fabula.android.wire.contact.di.ContactWireDaoModule;
import dev.fabula.android.wire.contact.di.ContactWireDaoModule_ProvidesContactWireDAOFactory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSupportComponent implements SupportComponent {
  private Provider<AppRoomDatabase> providesRoomDatabaseProvider;

  private Provider<SupportDao> providesSupportDAOProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<SupportApi> getSupportApiProvider;

  private Provider<PlatformDao> providesPlatformDAOProvider;

  private Provider<BridgeCrossingDao> providesBridgeDAOProvider;

  private Provider<ContactWireDao> providesContactWireDAOProvider;

  private Provider<CarrierWireDao> providesCarrierWireDAOProvider;

  private Provider<MeasurementTypeDao> providesMeasurementTypeDAOProvider;

  private Provider<CreateMeasurementsDao> providesCreateMeasurementsDAOProvider;

  private Provider<SupportRepository> supportRepositoryProvider;

  private Provider<SupportViewModule> supportViewModuleProvider;

  private DaggerSupportComponent(SupportDaoModule supportDaoModuleParam,
      SupportApiModule supportApiModuleParam, PlatformDaoModule platformDaoModuleParam,
      BridgeCrossingDaoModule bridgeCrossingDaoModuleParam,
      ContactWireDaoModule contactWireDaoModuleParam,
      CarrierWireDaoModule carrierWireDaoModuleParam,
      MeasurementTypeDaoModule measurementTypeDaoModuleParam,
      CreateMeasurementsDaoModule createMeasurementsDaoModuleParam,
      AppComponent appComponentParam) {

    initialize(supportDaoModuleParam, supportApiModuleParam, platformDaoModuleParam, bridgeCrossingDaoModuleParam, contactWireDaoModuleParam, carrierWireDaoModuleParam, measurementTypeDaoModuleParam, createMeasurementsDaoModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(SupportViewModule.class, (Provider) supportViewModuleProvider);
  }

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final SupportDaoModule supportDaoModuleParam,
      final SupportApiModule supportApiModuleParam, final PlatformDaoModule platformDaoModuleParam,
      final BridgeCrossingDaoModule bridgeCrossingDaoModuleParam,
      final ContactWireDaoModule contactWireDaoModuleParam,
      final CarrierWireDaoModule carrierWireDaoModuleParam,
      final MeasurementTypeDaoModule measurementTypeDaoModuleParam,
      final CreateMeasurementsDaoModule createMeasurementsDaoModuleParam,
      final AppComponent appComponentParam) {
    this.providesRoomDatabaseProvider = new dev_fabula_android_app_di_AppComponent_providesRoomDatabase(appComponentParam);
    this.providesSupportDAOProvider = SupportDaoModule_ProvidesSupportDAOFactory.create(supportDaoModuleParam, providesRoomDatabaseProvider);
    this.provideRetrofitProvider = new dev_fabula_android_app_di_AppComponent_provideRetrofit(appComponentParam);
    this.getSupportApiProvider = SupportApiModule_GetSupportApiFactory.create(supportApiModuleParam, provideRetrofitProvider);
    this.providesPlatformDAOProvider = PlatformDaoModule_ProvidesPlatformDAOFactory.create(platformDaoModuleParam, providesRoomDatabaseProvider);
    this.providesBridgeDAOProvider = BridgeCrossingDaoModule_ProvidesBridgeDAOFactory.create(bridgeCrossingDaoModuleParam, providesRoomDatabaseProvider);
    this.providesContactWireDAOProvider = ContactWireDaoModule_ProvidesContactWireDAOFactory.create(contactWireDaoModuleParam, providesRoomDatabaseProvider);
    this.providesCarrierWireDAOProvider = CarrierWireDaoModule_ProvidesCarrierWireDAOFactory.create(carrierWireDaoModuleParam, providesRoomDatabaseProvider);
    this.providesMeasurementTypeDAOProvider = MeasurementTypeDaoModule_ProvidesMeasurementTypeDAOFactory.create(measurementTypeDaoModuleParam, providesRoomDatabaseProvider);
    this.providesCreateMeasurementsDAOProvider = CreateMeasurementsDaoModule_ProvidesCreateMeasurementsDAOFactory.create(createMeasurementsDaoModuleParam, providesRoomDatabaseProvider);
    this.supportRepositoryProvider = SupportRepository_Factory.create(providesSupportDAOProvider, getSupportApiProvider, providesPlatformDAOProvider, providesBridgeDAOProvider, providesContactWireDAOProvider, providesCarrierWireDAOProvider, providesMeasurementTypeDAOProvider, providesCreateMeasurementsDAOProvider);
    this.supportViewModuleProvider = SupportViewModule_Factory.create(supportRepositoryProvider);
  }

  @Override
  public void inject(SupportFragment fragment) {
    injectSupportFragment(fragment);
  }

  private SupportFragment injectSupportFragment(SupportFragment instance) {
    ViewModelFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private SupportDaoModule supportDaoModule;

    private SupportApiModule supportApiModule;

    private PlatformDaoModule platformDaoModule;

    private BridgeCrossingDaoModule bridgeCrossingDaoModule;

    private ContactWireDaoModule contactWireDaoModule;

    private CarrierWireDaoModule carrierWireDaoModule;

    private MeasurementTypeDaoModule measurementTypeDaoModule;

    private CreateMeasurementsDaoModule createMeasurementsDaoModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder supportDaoModule(SupportDaoModule supportDaoModule) {
      this.supportDaoModule = Preconditions.checkNotNull(supportDaoModule);
      return this;
    }

    public Builder supportApiModule(SupportApiModule supportApiModule) {
      this.supportApiModule = Preconditions.checkNotNull(supportApiModule);
      return this;
    }

    public Builder platformDaoModule(PlatformDaoModule platformDaoModule) {
      this.platformDaoModule = Preconditions.checkNotNull(platformDaoModule);
      return this;
    }

    public Builder bridgeCrossingDaoModule(BridgeCrossingDaoModule bridgeCrossingDaoModule) {
      this.bridgeCrossingDaoModule = Preconditions.checkNotNull(bridgeCrossingDaoModule);
      return this;
    }

    public Builder contactWireDaoModule(ContactWireDaoModule contactWireDaoModule) {
      this.contactWireDaoModule = Preconditions.checkNotNull(contactWireDaoModule);
      return this;
    }

    public Builder carrierWireDaoModule(CarrierWireDaoModule carrierWireDaoModule) {
      this.carrierWireDaoModule = Preconditions.checkNotNull(carrierWireDaoModule);
      return this;
    }

    public Builder measurementTypeDaoModule(MeasurementTypeDaoModule measurementTypeDaoModule) {
      this.measurementTypeDaoModule = Preconditions.checkNotNull(measurementTypeDaoModule);
      return this;
    }

    public Builder createMeasurementsDaoModule(
        CreateMeasurementsDaoModule createMeasurementsDaoModule) {
      this.createMeasurementsDaoModule = Preconditions.checkNotNull(createMeasurementsDaoModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public SupportComponent build() {
      if (supportDaoModule == null) {
        this.supportDaoModule = new SupportDaoModule();
      }
      if (supportApiModule == null) {
        this.supportApiModule = new SupportApiModule();
      }
      if (platformDaoModule == null) {
        this.platformDaoModule = new PlatformDaoModule();
      }
      if (bridgeCrossingDaoModule == null) {
        this.bridgeCrossingDaoModule = new BridgeCrossingDaoModule();
      }
      if (contactWireDaoModule == null) {
        this.contactWireDaoModule = new ContactWireDaoModule();
      }
      if (carrierWireDaoModule == null) {
        this.carrierWireDaoModule = new CarrierWireDaoModule();
      }
      if (measurementTypeDaoModule == null) {
        this.measurementTypeDaoModule = new MeasurementTypeDaoModule();
      }
      if (createMeasurementsDaoModule == null) {
        this.createMeasurementsDaoModule = new CreateMeasurementsDaoModule();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerSupportComponent(supportDaoModule, supportApiModule, platformDaoModule, bridgeCrossingDaoModule, contactWireDaoModule, carrierWireDaoModule, measurementTypeDaoModule, createMeasurementsDaoModule, appComponent);
    }
  }

  private static class dev_fabula_android_app_di_AppComponent_providesRoomDatabase implements Provider<AppRoomDatabase> {
    private final AppComponent appComponent;

    dev_fabula_android_app_di_AppComponent_providesRoomDatabase(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AppRoomDatabase get() {
      return Preconditions.checkNotNull(appComponent.providesRoomDatabase(), "Cannot return null from a non-@Nullable component method");
    }
  }

  private static class dev_fabula_android_app_di_AppComponent_provideRetrofit implements Provider<Retrofit> {
    private final AppComponent appComponent;

    dev_fabula_android_app_di_AppComponent_provideRetrofit(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Retrofit get() {
      return Preconditions.checkNotNull(appComponent.provideRetrofit(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
