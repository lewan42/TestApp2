// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.splash;

import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import dev.fabula.android.app.di.AppComponent;
import dev.fabula.android.auth_old.AppAuth;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSplashComponent implements SplashComponent {
  private final AppComponent appComponent;

  private Provider<AppAuth> provideAuthProvider;

  private DaggerSplashComponent(AppComponent appComponentParam) {
    this.appComponent = appComponentParam;
    initialize(appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppComponent appComponentParam) {
    this.provideAuthProvider = SingleCheck.provider(new dev_fabula_android_app_di_AppComponent_provideAuth(appComponentParam));
  }

  @Override
  public void inject(SplashFragment fragment) {
    injectSplashFragment(fragment);
  }

  @Override
  public void inject(RefreshDataWork fragment) {
    injectRefreshDataWork(fragment);
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectAuth(instance, provideAuthProvider.get());
    return instance;
  }

  private RefreshDataWork injectRefreshDataWork(RefreshDataWork instance) {
    RefreshDataWork_MembersInjector.injectRetrofit(instance, Preconditions.checkNotNull(appComponent.provideRetrofit(), "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private AppComponent appComponent;

    private Builder() {
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public SplashComponent build() {
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerSplashComponent(appComponent);
    }
  }

  private static class dev_fabula_android_app_di_AppComponent_provideAuth implements Provider<AppAuth> {
    private final AppComponent appComponent;

    dev_fabula_android_app_di_AppComponent_provideAuth(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AppAuth get() {
      return Preconditions.checkNotNull(appComponent.provideAuth(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
