// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.app.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideBaseUrlFactory implements Factory<String> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  public NetworkModule_ProvideBaseUrlFactory(NetworkModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public String get() {
    return provideBaseUrl(module, contextProvider.get());
  }

  public static NetworkModule_ProvideBaseUrlFactory create(NetworkModule module,
      Provider<Context> contextProvider) {
    return new NetworkModule_ProvideBaseUrlFactory(module, contextProvider);
  }

  public static String provideBaseUrl(NetworkModule instance, Context context) {
    return Preconditions.checkNotNull(instance.provideBaseUrl(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
