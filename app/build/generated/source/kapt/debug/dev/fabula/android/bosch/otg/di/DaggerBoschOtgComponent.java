// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.bosch.otg.di;

import androidx.lifecycle.ViewModel;
import dagger.internal.Preconditions;
import dev.fabula.android.app.di.AppComponent;
import dev.fabula.android.app.di.ViewModelFactory;
import dev.fabula.android.app.ui.ViewModelFragment_MembersInjector;
import dev.fabula.android.bosch.otg.data.source.BoschOtgDataSource;
import dev.fabula.android.bosch.otg.repo.BoschOtgRepository;
import dev.fabula.android.bosch.otg.repo.BoschOtgRepository_Factory;
import dev.fabula.android.bosch.otg.ui.BoschOtgFragment;
import dev.fabula.android.bosch.otg.ui.BoschOtgViewModule;
import dev.fabula.android.bosch.otg.ui.BoschOtgViewModule_Factory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerBoschOtgComponent implements BoschOtgComponent {
  private Provider<BoschOtgDataSource> providesBoschOtgDAOProvider;

  private Provider<BoschOtgRepository> boschOtgRepositoryProvider;

  private Provider<BoschOtgViewModule> boschOtgViewModuleProvider;

  private DaggerBoschOtgComponent(BoschOtgModuleDataSource boschOtgModuleDataSourceParam,
      AppComponent appComponent) {

    initialize(boschOtgModuleDataSourceParam, appComponent);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(BoschOtgViewModule.class, (Provider) boschOtgViewModuleProvider);
  }

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final BoschOtgModuleDataSource boschOtgModuleDataSourceParam,
      final AppComponent appComponent) {
    this.providesBoschOtgDAOProvider = BoschOtgModuleDataSource_ProvidesBoschOtgDAOFactory.create(boschOtgModuleDataSourceParam);
    this.boschOtgRepositoryProvider = BoschOtgRepository_Factory.create(providesBoschOtgDAOProvider);
    this.boschOtgViewModuleProvider = BoschOtgViewModule_Factory.create(boschOtgRepositoryProvider);
  }

  @Override
  public void inject(BoschOtgFragment fragment) {
    injectBoschOtgFragment(fragment);
  }

  private BoschOtgFragment injectBoschOtgFragment(BoschOtgFragment instance) {
    ViewModelFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private BoschOtgModuleDataSource boschOtgModuleDataSource;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder boschOtgModuleDataSource(BoschOtgModuleDataSource boschOtgModuleDataSource) {
      this.boschOtgModuleDataSource = Preconditions.checkNotNull(boschOtgModuleDataSource);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public BoschOtgComponent build() {
      if (boschOtgModuleDataSource == null) {
        this.boschOtgModuleDataSource = new BoschOtgModuleDataSource();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerBoschOtgComponent(boschOtgModuleDataSource, appComponent);
    }
  }
}
