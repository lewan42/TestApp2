// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.app.di;

import android.content.Context;
import android.graphics.drawable.Drawable;
import com.bumptech.glide.RequestBuilder;
import com.bumptech.glide.RequestManager;
import com.google.gson.Gson;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import dev.fabula.android.app.db.AppRoomDatabase;
import dev.fabula.android.app.ui.AppActivity;
import dev.fabula.android.auth_old.AppAuth;
import dev.fabula.android.auth_old.AppAuth_Factory;
import dev.fabula.android.splash.SplashFragment;
import dev.fabula.android.splash.SplashFragment_MembersInjector;
import io.michaelrocks.libphonenumber.android.PhoneNumberUtil;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final Context application;

  private final GlideModule glideModule;

  private final DatabaseModule databaseModule;

  private Provider<Context> applicationProvider;

  private Provider<PhoneNumberUtil> providePhoneNumberUtilProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<String> provideBaseUrlProvider;

  private Provider<AppAuth> appAuthProvider;

  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private DaggerAppComponent(PhoneModule phoneModuleParam, GlideModule glideModuleParam,
      GsonModule gsonModuleParam, NetworkModule networkModuleParam,
      DatabaseModule databaseModuleParam, Context applicationParam) {
    this.application = applicationParam;
    this.glideModule = glideModuleParam;
    this.databaseModule = databaseModuleParam;
    initialize(phoneModuleParam, glideModuleParam, gsonModuleParam, networkModuleParam, databaseModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final PhoneModule phoneModuleParam, final GlideModule glideModuleParam,
      final GsonModule gsonModuleParam, final NetworkModule networkModuleParam,
      final DatabaseModule databaseModuleParam, final Context applicationParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.providePhoneNumberUtilProvider = SingleCheck.provider(PhoneModule_ProvidePhoneNumberUtilFactory.create(phoneModuleParam, applicationProvider));
    this.provideGsonProvider = SingleCheck.provider(GsonModule_ProvideGsonFactory.create(gsonModuleParam));
    this.provideBaseUrlProvider = SingleCheck.provider(NetworkModule_ProvideBaseUrlFactory.create(networkModuleParam, applicationProvider));
    this.appAuthProvider = AppAuth_Factory.create(applicationProvider);
    this.provideHttpClientProvider = SingleCheck.provider(NetworkModule_ProvideHttpClientFactory.create(networkModuleParam, applicationProvider, appAuthProvider));
    this.provideRetrofitProvider = SingleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam, provideBaseUrlProvider, provideHttpClientProvider, provideGsonProvider));
  }

  @Override
  public PhoneNumberUtil providePhoneNumberUtil() {
    return providePhoneNumberUtilProvider.get();
  }

  @Override
  public Gson provideGson() {
    return provideGsonProvider.get();
  }

  @Override
  public String provideBaseUrl() {
    return provideBaseUrlProvider.get();
  }

  @Override
  public OkHttpClient provideHttpClient() {
    return provideHttpClientProvider.get();
  }

  @Override
  public Retrofit provideRetrofit() {
    return provideRetrofitProvider.get();
  }

  @Override
  public RequestManager provideRequestManager() {
    return GlideModule_ProvideRequestManagerFactory.provideRequestManager(glideModule, application);
  }

  @Override
  public RequestBuilder<Drawable> provideRequestBuilder() {
    return GlideModule_ProvideRequestBuilderFactory.provideRequestBuilder(glideModule, provideRequestManager());
  }

  @Override
  public AppRoomDatabase providesRoomDatabase() {
    return DatabaseModule_ProvidesRoomDatabaseFactory.providesRoomDatabase(databaseModule, application);
  }

  @Override
  public void inject(AppActivity activity) {
  }

  @Override
  public void inject(SplashFragment fragment) {
    injectSplashFragment(fragment);
  }

  @Override
  public Context provideContext() {
    return application;
  }

  @Override
  public AppAuth provideAuth() {
    return new AppAuth(application);
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectAuth(instance, provideAuth());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Context application;

    @Override
    public Builder application(Context context) {
      this.application = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Context.class);
      return new DaggerAppComponent(new PhoneModule(), new GlideModule(), new GsonModule(), new NetworkModule(), new DatabaseModule(), application);
    }
  }
}
