// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.app.di;

import android.graphics.drawable.Drawable;
import com.bumptech.glide.RequestBuilder;
import com.bumptech.glide.RequestManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GlideModule_ProvideRequestBuilderFactory implements Factory<RequestBuilder<Drawable>> {
  private final GlideModule module;

  private final Provider<RequestManager> imageLoaderProvider;

  public GlideModule_ProvideRequestBuilderFactory(GlideModule module,
      Provider<RequestManager> imageLoaderProvider) {
    this.module = module;
    this.imageLoaderProvider = imageLoaderProvider;
  }

  @Override
  public RequestBuilder<Drawable> get() {
    return provideRequestBuilder(module, imageLoaderProvider.get());
  }

  public static GlideModule_ProvideRequestBuilderFactory create(GlideModule module,
      Provider<RequestManager> imageLoaderProvider) {
    return new GlideModule_ProvideRequestBuilderFactory(module, imageLoaderProvider);
  }

  public static RequestBuilder<Drawable> provideRequestBuilder(GlideModule instance,
      RequestManager imageLoader) {
    return Preconditions.checkNotNull(instance.provideRequestBuilder(imageLoader), "Cannot return null from a non-@Nullable @Provides method");
  }
}
