// Generated by Dagger (https://dagger.dev).
package dev.fabula.android.section.di;

import androidx.lifecycle.ViewModel;
import dagger.internal.Preconditions;
import dev.fabula.android.app.db.AppRoomDatabase;
import dev.fabula.android.app.di.AppComponent;
import dev.fabula.android.app.di.ViewModelFactory;
import dev.fabula.android.app.ui.ViewModelFragment_MembersInjector;
import dev.fabula.android.section.dao.RailwaySectionDao;
import dev.fabula.android.section.repo.RailwaySectionRepository;
import dev.fabula.android.section.repo.RailwaySectionRepository_Factory;
import dev.fabula.android.section.ui.RailwaySectionFragment;
import dev.fabula.android.section.ui.RailwaySectionViewModel;
import dev.fabula.android.section.ui.RailwaySectionViewModel_Factory;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerRailwaySectionComponent implements RailwaySectionComponent {
  private Provider<AppRoomDatabase> providesRoomDatabaseProvider;

  private Provider<RailwaySectionDao> providesRailwaySectionDAOProvider;

  private Provider<RailwaySectionRepository> railwaySectionRepositoryProvider;

  private Provider<RailwaySectionViewModel> railwaySectionViewModelProvider;

  private DaggerRailwaySectionComponent(RailwaySectionDaoModule railwaySectionDaoModuleParam,
      AppComponent appComponentParam) {

    initialize(railwaySectionDaoModuleParam, appComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
      ) {
    return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(RailwaySectionViewModel.class, (Provider) railwaySectionViewModelProvider);
  }

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final RailwaySectionDaoModule railwaySectionDaoModuleParam,
      final AppComponent appComponentParam) {
    this.providesRoomDatabaseProvider = new dev_fabula_android_app_di_AppComponent_providesRoomDatabase(appComponentParam);
    this.providesRailwaySectionDAOProvider = RailwaySectionDaoModule_ProvidesRailwaySectionDAOFactory.create(railwaySectionDaoModuleParam, providesRoomDatabaseProvider);
    this.railwaySectionRepositoryProvider = RailwaySectionRepository_Factory.create(providesRailwaySectionDAOProvider);
    this.railwaySectionViewModelProvider = RailwaySectionViewModel_Factory.create(railwaySectionRepositoryProvider);
  }

  @Override
  public void inject(RailwaySectionFragment fragment) {
    injectRailwaySectionFragment(fragment);
  }

  private RailwaySectionFragment injectRailwaySectionFragment(RailwaySectionFragment instance) {
    ViewModelFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  public static final class Builder {
    private RailwaySectionDaoModule railwaySectionDaoModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder railwaySectionDaoModule(RailwaySectionDaoModule railwaySectionDaoModule) {
      this.railwaySectionDaoModule = Preconditions.checkNotNull(railwaySectionDaoModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public RailwaySectionComponent build() {
      if (railwaySectionDaoModule == null) {
        this.railwaySectionDaoModule = new RailwaySectionDaoModule();
      }
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerRailwaySectionComponent(railwaySectionDaoModule, appComponent);
    }
  }

  private static class dev_fabula_android_app_di_AppComponent_providesRoomDatabase implements Provider<AppRoomDatabase> {
    private final AppComponent appComponent;

    dev_fabula_android_app_di_AppComponent_providesRoomDatabase(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public AppRoomDatabase get() {
      return Preconditions.checkNotNull(appComponent.providesRoomDatabase(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
