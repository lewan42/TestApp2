// Generated by view binder compiler. Do not edit!
package dev.fabula.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import dev.fabula.android.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BridgeCrossingFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnDimensionsDown;

  @NonNull
  public final Button btnSave;

  @NonNull
  public final Button btnSupports;

  @NonNull
  public final LayoutHeaderBinding layoutHeader;

  private BridgeCrossingFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnDimensionsDown, @NonNull Button btnSave, @NonNull Button btnSupports,
      @NonNull LayoutHeaderBinding layoutHeader) {
    this.rootView = rootView;
    this.btnDimensionsDown = btnDimensionsDown;
    this.btnSave = btnSave;
    this.btnSupports = btnSupports;
    this.layoutHeader = layoutHeader;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BridgeCrossingFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BridgeCrossingFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bridge_crossing_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BridgeCrossingFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_dimensions_down;
      Button btnDimensionsDown = rootView.findViewById(id);
      if (btnDimensionsDown == null) {
        break missingId;
      }

      id = R.id.btn_save;
      Button btnSave = rootView.findViewById(id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btn_supports;
      Button btnSupports = rootView.findViewById(id);
      if (btnSupports == null) {
        break missingId;
      }

      id = R.id.layout_header;
      View layoutHeader = rootView.findViewById(id);
      if (layoutHeader == null) {
        break missingId;
      }
      LayoutHeaderBinding binding_layoutHeader = LayoutHeaderBinding.bind(layoutHeader);

      return new BridgeCrossingFragmentBinding((ConstraintLayout) rootView, btnDimensionsDown,
          btnSave, btnSupports, binding_layoutHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
